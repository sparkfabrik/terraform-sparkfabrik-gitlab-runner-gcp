## CHART VALUES: https://gitlab.com/gitlab-org/charts/gitlab-runner/-/blob/main/values.yaml

## The GitLab Server URL (with protocol) that want to register the runner against
## ref: https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-register
##
gitlabUrl: ${gitlab_url_with_protocol}

## The Registration Token for adding new Runners to the GitLab Server. This must
## be retrieved from your GitLab Instance.
## ref: https://docs.gitlab.com/ce/ci/runners/README.html
##
runnerRegistrationToken: "${runner_registration_token}"

## For RBAC support:
rbac:
  create: true
  ## Define list of rules to be added to the rbac role permissions.
  ## Each rule supports the keys:
  ## - apiGroups: default "" (indicates the core API group) if missing or empty.
  ## - resources: default "*" if missing or empty.
  ## - verbs: default "*" if missing or empty.
  rules: []
  # - resources: ["pods", "secrets"]
  #   verbs: ["get", "list", "watch", "create", "patch", "delete"]
  # - apiGroups: [""]
  #   resources: ["pods/exec"]
  #   verbs: ["create", "patch", "delete"]

  ## Run the gitlab-bastion container with the ability to deploy/manage containers of jobs
  ## cluster-wide or only within namespace
  clusterWideAccess: false

## Configure integrated Prometheus metrics exporter
## ref: https://docs.gitlab.com/runner/monitoring/#configuration-of-the-metrics-http-server
metrics:
  enabled: true

## Configuration for the Pods that the runner launches for each new job
##
runners:
  # runner configuration, where the multi line strings is evaluated as
  # template so you can specify helm values inside of it.
  #
  # tpl: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  # runner configuration: https://docs.gitlab.com/runner/configuration/advanced-configuration.html
  # Docs at: https://docs.gitlab.com/runner/executors/kubernetes.html
  ## NOTE: resource inspection with kubectl top has shown an
  ## usage of about 1 cpu core and 3GB of ram during builds.
  config: |
    [[runners]]
      [runners.kubernetes]
        image = "ubuntu:20.04"
        privileged = true
        poll_timeout = 60044
        cpu_request = "${build_container_cpu_request}"
        memory_request = "${build_container_memory_request}"
        service_cpu_request = "250m"
        service_memory_request = "256Mi"
        helper_cpu_request = "50m"
        helper_memory_request = "16Mi"
        [[runners.kubernetes.volumes.empty_dir]]
          name = "docker-certs"
          mount_path = "/certs/client"
          medium = "Memory"
      [runners.cache]
        Type = "s3"
        Path = "runner"
        Shared = true
        [runners.cache.s3]
          ServerAddress = "${minio_server}:9000"
          BucketName = "${bucket_name}"
          Insecure = true

  # We set runners.cache.s3.insecure = true to allow http connection to the bucket.

  # We do not want to run untagged jobs.
  runUntagged: ${run_untagged}

  cache:
    ## S3 the name of the secret.
    secretName: ${cache_secretname}

  ## Service Account to be used for runners
  ##
  serviceAccountName: ${runner_sa_name}

  ## Specify the tags associated with the runner. Comma-separated list of tags.
  ##
  ## ref: https://docs.gitlab.com/ce/ci/runners/#use-tags-to-limit-the-number-of-jobs-using-the-runner
  ##
  tags: "${runner_tags}"

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 128Mi
    cpu: 200m
